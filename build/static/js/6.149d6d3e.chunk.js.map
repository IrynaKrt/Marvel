{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getCharacterByName","name","res","results","map","_transformCharacter","getAllCharacters","a","offset","getCharacter","id","getAllComics","_transformComics","getComics","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","slice","title","pageCount","language","textObjects","price","prices","Skeleton","className","setContent","Component","Spinner","View","imgStyle","includes","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","setOffset","newItemLoading","setNewItemLoading","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","console","log","to","resourceURI","CharInfo","charId","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","error","errorInfo","this","setState","children","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"iGAAe,UAA0B,kC,OCQ1BA,IANM,WACjB,OACI,qBAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAUC,IAAKC,EAAKC,IAAI,Y,2EC8DhHC,IAhEU,WACrB,MCDmB,WACnB,MAA8BC,mBAAS,WAAU,mBAA1CC,EAAO,KAAEC,EAAU,KA0B1B,MAAO,CAACC,QAxBQC,sBAAW,uCAAC,WAAOC,GAAG,2FAEZ,OAFcC,EAAM,+BAAG,MAAOC,EAAI,+BAAG,KAAMC,EAAO,+BAAG,CAAC,eAAgB,oBAE5FN,EAAW,WAAW,kBAGKO,MAAMJ,EAAK,CAACC,SAAQC,OAAMC,YAAU,KAAD,EAA5C,IAARE,EAAQ,QACDC,GAAG,CAAD,sBACL,IAAIC,MAAM,mBAAD,OAAoBP,EAAG,qBAAaK,EAASG,SAAU,KAAD,oBAEtDH,EAASI,OAAO,KAAD,GAAxB,OAAJC,EAAI,yBAEHA,GAAI,QAES,MAFT,0BAEXb,EAAW,SAAS,+DAI3B,mDAjB0B,GAiBxB,IAOcc,WALEZ,uBAAY,WAC3BF,EAAW,aAEZ,IAE0BD,UAASC,cD1Bae,GAA5Cd,EAAO,EAAPA,QAASa,EAAU,EAAVA,WAAYf,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAE/BgB,EAAW,4CACXC,EAAU,0CAGbC,EAAkB,uCAAG,WAAOC,GAAI,uFACnBlB,EAAQ,GAAD,OAAIe,EAAQ,2BAAmBG,EAAI,YAAIF,IAAW,KAAD,EAAjE,OAAHG,EAAG,yBACFA,EAAIP,KAAKQ,QAAQC,IAAIC,IAAoB,2CAChD,gBAHuB,sCAKfC,EAAgB,uCAAG,0CAAAC,EAAA,sDAA+B,OAAxBC,EAAM,+BAPd,IAOgC,SACxCzB,EAAQ,GAAD,OAAIe,EAAQ,qCAA6BU,EAAM,YAAIT,IAAW,KAAD,EAA7E,OAAHG,EAAG,yBACFA,EAAIP,KAAKQ,QAAQC,IAAIC,IAAoB,2CAChD,kBAHwB,mCAKnBI,EAAY,uCAAG,WAAOC,GAAE,uFACX3B,EAAQ,GAAD,OAAIe,EAAQ,sBAAcY,EAAE,YAAIX,IAAW,KAAD,EAA1D,OAAHG,EAAG,yBACFG,EAAoBH,EAAIP,KAAKQ,QAAQ,KAAG,2CAC/C,gBAHiB,sCAKTQ,EAAY,uCAAG,0CAAAJ,EAAA,sDAAiB,OAAVC,EAAM,+BAAG,EAAC,SACtBzB,EAAQ,GAAD,OAAIe,EAAQ,qDAA6CU,EAAM,YAAIT,IAAW,KAAD,EAA7F,OAAHG,EAAG,yBACFA,EAAIP,KAAKQ,QAAQC,IAAIQ,IAAiB,2CAC7C,kBAHoB,mCAKfC,EAAS,uCAAG,WAAOH,GAAE,uFACR3B,EAAQ,GAAD,OAAIe,EAAQ,kBAAUY,EAAE,YAAIX,IAAW,KAAD,EAAtD,OAAHG,EAAG,yBACFU,EAAiBV,EAAIP,KAAKQ,QAAQ,KAAG,2CAC5C,gBAHc,sCAKNE,EAAsB,SAACS,GACzB,MAAO,CACHJ,GAAII,EAAKJ,GACTT,KAAMa,EAAKb,KACXc,YAAaD,EAAKC,YAClBC,UAAWF,EAAKE,UAAUC,KAAO,IAAMH,EAAKE,UAAUE,UACtDC,SAAUL,EAAKM,KAAK,GAAGnC,IACvBoC,KAAMP,EAAKM,KAAK,GAAGnC,IACnBqC,OAAQR,EAAKQ,OAAOC,MAAMC,MAAM,EAAG,MAIrCZ,EAAmB,SAACU,GAAY,IAAD,EACvC,MAAO,CACNZ,GAAIY,EAAOZ,GACXe,MAAOH,EAAOG,MACdV,YAAaO,EAAOP,aAAe,0BACnCW,UAAWJ,EAAOI,UAAS,UACrBJ,EAAOI,UAAS,OACnB,2CACHV,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DS,UAA+B,QAArB,EAAAL,EAAOM,YAAY,UAAE,aAArB,EAAuBD,WAAY,QAE7CE,MAAOP,EAAOQ,OAAO,GAAGD,MAAK,UACvBP,EAAOQ,OAAO,GAAGD,MAAK,KACzB,gBAIF,MAAO,CAAChD,UAASC,aAAY2B,eAAcT,qBAAoBM,mBAAkBV,aAAYiB,YAAWF,kB,kEE5C7FoB,EAjBE,WACb,OACI,qCACI,mBAAGC,UAAU,eAAc,SAAC,iDAC5B,sBAAKA,UAAU,WAAU,UACrB,sBAAKA,UAAU,yBAAwB,UACnC,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,iCCMhBC,IAfI,SAACpD,EAASqD,EAAWvC,GACpC,OAAOd,GACH,IAAK,UACD,OAAO,cAAC,EAAQ,IACpB,IAAK,UACD,OAAO,cAACsD,EAAA,EAAO,IACnB,IAAK,YACD,OAAO,cAACD,EAAS,CAACvC,KAAMA,IAC5B,IAAK,QACD,OAAO,cAAC1B,EAAA,EAAY,IACxB,QACI,MAAM,IAAIuB,MAAM,+B,0LCfb,G,MAAA,IAA0B,qC,OC0DnC4C,EAAO,SAAH,GAAgB,IAAXzC,EAAI,EAAJA,KACJM,EAAgDN,EAAhDM,KAAMc,EAA0CpB,EAA1CoB,YAAaC,EAA6BrB,EAA7BqB,UAAWG,EAAkBxB,EAAlBwB,SAAUE,EAAQ1B,EAAR0B,KAC3CgB,EAAW,CAAC,UAAc,SAK9B,OAJIrB,EAAUsB,SAAS,yBACnBD,EAAW,CAAC,UAAc,YAI1B,sBAAKL,UAAU,oBAAmB,UAC9B,qBAAKxD,IAAKwC,EAAWtC,IAAI,mBAAmBsD,UAAU,kBAAkB9D,MAAOmE,IAC/E,sBAAKL,UAAU,mBAAkB,UAC7B,mBAAGA,UAAU,mBAAkB,SAAE/B,IACjC,mBAAG+B,UAAU,oBAAmB,SAAEjB,EAAcA,EAAYS,MAAM,EAAG,IAAK,MAAQ,iDAClF,sBAAKQ,UAAU,mBAAkB,UAC7B,mBAAGO,KAAMpB,EAAUa,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGO,KAAMlB,EAAMW,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,qBAQhCQ,EA5EI,WAEf,MAAwB5D,mBAAS,MAAK,mBAA/BkC,EAAI,KAAE2B,EAAO,KAEpB,EAAwD9D,cAAjD8B,EAAY,EAAZA,aAAcb,EAAU,EAAVA,WAAYf,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAE1C4D,qBAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,MAGnB,IAEH,IAAMG,EAAe,SAACjC,GAClB2B,EAAQ3B,IAGN6B,EAAa,WACf/C,IACA,IAAMc,EAAKsC,KAAKC,MAAmB,IAAbD,KAAKE,SAAgC,QAC3DzC,EAAaC,GACRyC,KAAKJ,GACLI,MAAK,kBAAMrE,EAAW,iBAK/B,OACI,sBAAKkD,UAAU,aAAY,UACtBC,YAAWpD,EAASuD,EAAMtB,GAC3B,sBAAKkB,UAAU,qBAAoB,UAC/B,oBAAGA,UAAU,oBAAmB,UAAC,8BACF,uBAAK,4CAGpC,mBAAGA,UAAU,oBAAmB,SAAC,0BAGjC,wBAAQoB,QAAST,EAAYX,UAAU,sBAAqB,SACxD,qBAAKA,UAAU,QAAO,SAAC,aAE3B,qBAAKxD,IAAK6E,EAAS3E,IAAI,UAAUsD,UAAU,kC,uBCyF5CsB,G,MAtHE,SAACC,GACd,MAAgC3E,mBAAS,IAAG,mBAArC4E,EAAQ,KAAEC,EAAW,KAC5B,EAA4B7E,mBAAS,KAAI,mBAAlC4B,EAAM,KAAEkD,EAAS,KACxB,EAA4C9E,oBAAS,GAAM,mBAApD+E,EAAc,KAAEC,EAAiB,KACxC,EAAkChF,oBAAS,GAAM,mBAA1CiF,EAAS,KAAEC,EAAY,KAE9B,EAAgDnF,cAAzCE,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAAYwB,EAAgB,EAAhBA,iBAE5BoC,qBAAU,WACFlC,EAAS,KACTuD,EAAUvD,GAAQ,KAGvB,IAmBH,IAAMuD,EAAY,SAACvD,EAAQwD,GACbJ,GAAVI,GACA1D,EAAiBE,GACZ2C,KAAKc,GACLd,MAAK,kBAAMrE,EAAW,iBAGzBmF,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACTD,EAAYE,OAAS,IACpBD,GAAQ,GAGZV,GAAY,SAAAD,GAAQ,4BAAQA,GAAQ,YAAKU,OACzCR,GAAU,SAAAlD,GAAM,OAAIA,EAAS,KAC7BoD,GAAkB,SAAAD,GAAc,OAAI,KACpCG,GAAa,SAAAD,GAAS,OAAIM,MAGxBE,EAAWC,iBAAO,IAElBC,EAAc,SAAC7D,GACjB2D,EAASG,QAAQC,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,OAAO,0BACvDP,EAASG,QAAQ9D,GAAIiE,UAAUE,IAAI,uBACnCR,EAASG,QAAQ9D,GAAIoE,SAwCzB,IAAMC,EAAWC,mBAAQ,WACrB,OAhHW,SAACnG,EAASqD,EAAWyB,GACpC,OAAO9E,GACH,IAAK,UACD,OAAO,cAACsD,EAAA,EAAO,IACnB,IAAK,UACD,OAAOwB,EAAiB,cAACzB,EAAS,IAAK,cAACC,EAAA,EAAO,IACnD,IAAK,YACD,OAAO,cAACD,EAAS,IACrB,IAAK,QACD,OAAO,cAACjE,EAAA,EAAY,IACxB,QACI,MAAM,IAAIuB,MAAM,6BAqGbyC,CAAWpD,GAAS,kBArC/B,SAAqBoG,GACjB,IAAM1D,EAAS0D,EAAI7E,KAAI,SAACsE,EAAMQ,GAC1B,IAAI7C,EAAW,CAAC,UAAc,SAK9B,OAJIqC,EAAK1D,UAAUsB,SAAS,yBACxBD,EAAW,CAAC,UAAc,UAI1B,qBACIL,UAAU,aACVmD,SAAU,EACVC,IAAK,SAAAC,GAAE,OAAIhB,EAASG,QAAQU,GAAKG,GAEjCjC,QAAS,WACLG,EAAM+B,eAAeZ,EAAKhE,IAC1B6D,EAAYW,IAEhBK,WAAY,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnBlC,EAAM+B,eAAeZ,EAAKhE,IAC1B6D,EAAYW,KAElB,UACE,qBAAK1G,IAAKkG,EAAK1D,UAAWtC,IAAKgG,EAAKzE,KAAM/B,MAAOmE,IACjD,qBAAKL,UAAU,aAAY,SAAE0C,EAAKzE,SAZjCyE,EAAKhE,OAiBtB,OACI,oBAAIsB,UAAU,aAAY,SACrBT,IAMwBmE,CAAYlC,KAAWG,KAEzD,CAAC9E,IAEJ,OACI,sBAAKmD,UAAU,aAAY,UACtB+C,EACD,wBAAQ/C,UAAU,mCACV2D,SAAUhC,EACVzF,MAAO,CAAC,QAAW2F,EAAW,OAAS,SACvCT,QAAS,kBAAMW,EAAUvD,IAAQ,SACrC,qBAAKwB,UAAU,QAAO,SAAC,qB,OCxFjCI,G,MAAO,SAAH,GAAgB,IAAXzC,EAAI,EAAJA,KACJM,EAAwDN,EAAxDM,KAAMc,EAAkDpB,EAAlDoB,YAAaC,EAAqCrB,EAArCqB,UAAWG,EAA0BxB,EAA1BwB,SAAUE,EAAgB1B,EAAhB0B,KAAMC,EAAU3B,EAAV2B,OAEjDe,EAAW,CAAC,UAAc,SAK9B,OAJIrB,EAAUsB,SAAS,yBACnBD,EAAW,CAAC,UAAc,YAI1B,qCACI,sBAAKL,UAAU,eAAc,UACzB,qBAAKxD,IAAKwC,EAAWtC,IAAKuB,EAAM/B,MAAOmE,IACvC,gCACI,qBAAKL,UAAU,kBAAiB,SAAE/B,IAClC,sBAAK+B,UAAU,aAAY,UACvB,mBAAGO,KAAMpB,EAAUa,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGO,KAAMlB,EAAMW,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,oBAKvC,qBAAKA,UAAU,cAAa,SACvBjB,IAEL,qBAAKiB,UAAU,eAAc,SAAC,YAC9B,qBAAIA,UAAU,oBAAmB,UAC5BV,EAAO8C,OAAS,EAAI,KAAO,+CAExB9C,EAAOlB,KAAI,SAACsE,EAAMQ,GAGd,GAFAU,QAAQC,IAAInB,KAERQ,EAAI,GACR,OACI,cAAC,IAAI,CAACY,GAAE,kBAAapB,EAAKqB,YAAYvE,OAAO,IAAMQ,UAAU,oBAAmB,SAC5E,6BACK0C,EAAKzE,MADDiF,gBAgB1Bc,EAtFE,SAACzC,GAEd,MAAwB3E,mBAAS,MAAK,mBAA/BkC,EAAI,KAAE2B,EAAO,KAEpB,EAAwD9D,cAAjD8B,EAAY,EAAZA,aAAcb,EAAU,EAAVA,WAAYf,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAE1C4D,qBAAU,WACNC,MAED,CAACY,EAAM0C,SAEV,IAAMtD,EAAa,WACf/C,IACA,IAAOqG,EAAU1C,EAAV0C,OACFA,GAGLxF,EAAawF,GACR9C,KAAKJ,GACLI,MAAK,kBAAMrE,EAAW,iBAGzBiE,EAAe,SAACjC,GAClB2B,EAAQ3B,IAGZ,OACI,qBAAKkB,UAAU,aAAY,SACtBC,YAAWpD,EAASuD,EAAMtB,M,gBCsCxBoF,G,MAlEQ,WACnB,MAAwBtH,mBAAS,MAAK,mBAA/BkC,EAAI,KAAE2B,EAAO,KACpB,EAA+D9D,cAAvDE,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAAYkB,EAAkB,EAAlBA,mBAAoBJ,EAAU,EAAVA,WAE3CmD,EAAe,SAACjC,GAClB2B,EAAQ3B,IAWNqF,EAA2B,UAAZtH,EAAsB,qBAAKmD,UAAU,8BAA6B,SAAC,cAAC/D,EAAA,EAAY,MAAY,KAE3GkC,EAAWW,EAAcA,EAAKsD,OAAS,EACjC,sBAAKpC,UAAU,uBAAsB,UACjC,sBAAKA,UAAU,uBAAsB,UAAC,mBAAiBlB,EAAK,GAAGb,KAAK,YACpE,cAAC,IAAI,CAAC6F,GAAE,sBAAiBhF,EAAK,GAAGJ,IAAMsB,UAAU,2BAA0B,SACvE,qBAAKA,UAAU,QAAO,SAAC,iBAG/B,qBAAKA,UAAU,qBAAoB,SAAC,8DAPxB,KAWxB,OACI,sBAAKA,UAAU,oBAAmB,UAC9B,cAAC,IAAM,CACHoE,cAAiB,CACjBC,SAAU,IAEVC,iBAAoBC,IAAW,CAC/BF,SAAUE,MAAaC,SAAS,4BAEhCC,SAAa,YAAiB,IA9BtBxG,EA8BOoG,EAAQ,EAARA,SA9BPpG,EA+BGoG,EA9BnBzG,IAEAI,EAAmBC,GACdkD,KAAKJ,GACLI,MAAK,kBAAMrE,EAAW,iBA2BjB,SAEF,eAAC,IAAI,WACD,uBAAOkD,UAAU,qBAAqB0E,QAAQ,WAAU,SAAC,iCACzD,sBAAK1E,UAAU,uBAAsB,UACjC,cAAC,IAAK,CACFtB,GAAG,WACHT,KAAK,WACL0G,KAAK,OACLC,YAAY,eAChB,wBACID,KAAK,SACL3E,UAAU,sBACV2D,SAAsB,YAAZ9G,EAAsB,SAChC,qBAAKmD,UAAU,QAAO,SAAC,cAG/B,cAAC,IAAkB,CAAC6E,UAAU,MAAM7E,UAAU,qBAAqB/B,KAAK,kBAG/EE,EACAgG,O,gCChDEW,EApBI,iKAGd,OAHc,oCACfC,MAAQ,CACJC,OAAO,GACV,EAcA,OAdA,8CAED,SAAkBA,EAAOC,GACrBrB,QAAQC,IAAImB,EAAOC,GACnBC,KAAKC,SAAS,CACVH,OAAO,MAEd,oBAED,WACI,OAAwB,IAArBE,KAAKH,MAAMC,MACH,cAAC/I,EAAA,EAAY,IAEjBiJ,KAAK3D,MAAM6D,aACrB,EAjBc,C,MAASlF,WCHb,MAA0B,mCCgD1BmF,UArCE,WACb,MAAgCzI,mBAAS,MAAK,mBAAvC0I,EAAY,KAAE7E,EAAO,KAM5B,OACI,qCACI,eAAC8E,EAAA,EAAM,WACP,sBACItH,KAAK,cACLuH,QAAQ,8BAEZ,gCAAO,iCAEP,cAAC,EAAa,UACV,cAAC,EAAU,MAEf,sBAAKxF,UAAU,gBAAe,UAC9B,cAAC,EAAa,UACV,cAAC,EAAQ,CAACsD,eAlBC,SAAC5E,GACpB+B,EAAQ/B,QAmBJ,gCACI,cAAC,EAAa,UACV,cAAC,EAAQ,CAACuF,OAAQqB,MAEtB,cAAC,EAAa,UACV,cAAC,EAAc,YAIvB,qBAAKtF,UAAU,gBAAgBxD,IAAKiJ,EAAY/I,IAAI","file":"static/js/6.149d6d3e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; //такой синтаксис говорит, что эти значения менять нельзя!\r\n    const _apiKey = 'apikey=e5a7c35d5e11dc243a894f2e791957c1';\r\n    const _baseCharOffset = 210;\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getAllCharacters = async (offset = _baseCharOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, //превьюшка\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.slice(0, 10)\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"Not on sale\",\r\n\t\t};\r\n\t};\r\n\r\n    return {process, setProcess, getCharacter, getCharacterByName, getAllCharacters, clearError, getComics, getAllComics}\r\n}\r\n\r\nexport default useMarvelService;\r\n","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            return data; //!!!!\r\n        } catch(e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('waiting');\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError(); //очищает ошибка прошлого запроса\n        const id = Math.floor(Math.random() * (1011400 - 1011000)+ 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail.includes('image_not_available')) {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description ? description.slice(0, 97)+ '...' : 'The Avengers haven\\'t seen this character yet'}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../../components/spinner/Spinner';\nimport ErrorMessage from '../../components/errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [offset, setOffset] = useState(210);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {process, setProcess, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        if (offset < 219) {\n            onRequest(offset, true);\n          }\n          // eslint-disable-next-line\n    }, []);\n\n    // useEffect(() => {\n    //     window.addEventListener('scroll', onScroll);\n    //     // return () => window.removeEventListener('scroll', onScroll);\n    //   }, []);\n\n    // const onScroll = () => {\n    //     if (offset < 219) return;\n    //     if (newItemLoading) return;\n    //     if (charEnded) {\n    //         window.removeEventListener(\"scroll\", onScroll);\n    //     }\n\n    //     if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n    //         onRequest(offset);\n    //     }\n    // };\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setOffset(offset => offset + 9);\n        setNewItemLoading(newItemLoading => false);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail.includes('image_not_available')) {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el} //ручное формирование списка\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        clearError();\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail.includes('image_not_available')) {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'The Avengers haven\\'t seen this character yet'}\n                {\n                    comics.map((item, i) => {\n                        console.log(item);\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <Link to={`/comics/${item.resourceURI.slice(-5)}`} className=\"char__comics-item\">\n                                <li key={i}>\n                                    {item.name}\n                                </li>\n                            </Link>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { process, setProcess, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n    const results = !char ? null : char.length > 0 ?\r\n                <div className=\"char__search-wrapper\">\r\n                    <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                    <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                        <div className=\"inner\">To page</div>\r\n                    </Link>\r\n                </div> : \r\n                <div className=\"char__search-error\">\r\n                    The character was not found. Check the name and try again\r\n                </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error === true) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n                />\r\n            <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}